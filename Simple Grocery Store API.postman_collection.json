{
	"info": {
		"_postman_id": "ca009b93-c511-4281-8955-d0d808e89b2b",
		"name": "Simple Grocery Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28826382"
	},
	"item": [
		{
			"name": "Happy path",
			"item": [
				{
					"name": "API STATUS",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Stock is\", ()=> {",
									"    pm.expect(response[2].inStock).to.eql(true);",
									"});",
									"/*",
									"pm.test(\"Get the product ID to set a variable\", ()=> {",
									"    pm.expect(response[0].id).to.eql(4643);",
									"});*/",
									"",
									"pm.test(\"Status code is 200\", ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"/*",
									"pm.test('At least one available product exist',()=>{",
									"    console.log(response[2].id);",
									"    //sets up a new variable. It can be used in other requests related to the id",
									"    pm.collectionVariables.set('productID', response[2].id);",
									"});",
									"*/",
									"pm.test('At least one available product exist',()=>{",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response.length).to.be.above(0);",
									"    const product = response[1];",
									"    pm.expect(product).to.be.an('object');",
									"    pm.expect(product).to.be.haveOwnProperty('inStock');",
									"    pm.expect(product.inStock).to.be.true;",
									"    //sets a collection variable",
									"    //pm.collectionVariables.set('productID', product.id);",
									"    //sets a enviroment variable",
									"    pm.environment.set('productID', product.id);",
									"    console.log(product.id);",
									"   ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=coffee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get single product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response =  pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct product was retrieved',()=>{",
									" ",
									"    const requestedProductId = pm.variables.get('productID');",
									"    pm.expect(response.id).to.be.eql(requestedProductId);",
									"    //pm.variables.set('productID', product.id);",
									"",
									"    console.log(response.id);",
									"   ",
									"});",
									"",
									"",
									" ",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const response = pm.response.json();",
									"pm.test(\"Status code is 200\", () =>{",
									"    pm.response.to.have.status(200);",
									"    //console.log(response.cartId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"/*",
									"pm.test(\"Get the cartID\", ()=>{",
									"    console.log(response.cartId);",
									"    pm.expect(response).to.be.an('object');",
									"    c",
									"",
									"   ",
									"} );",
									"*/",
									"",
									"pm.test('Response has a valid cart id', ()=>{",
									"    ",
									"    pm.expect(response).to.be.an('object');",
									"    console.log(response);",
									"    pm.expect(response).to.be.haveOwnProperty('cartId');",
									"    pm.expect(response.cartId).to.be.string;",
									"    pm.environment.set('cartId', response.cartId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add an item to cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Add last item id\",()=>{",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.haveOwnProperty('itemId');",
									"    pm.expect(response.itemId).to.be.a('number');",
									"    //pm.collectionVariables.set('lastAddedItemId', response.itemId);",
									"    pm.environment.set('lastAddedItemId', response.itemId);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 4641,\n    \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items?=",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Modify an item in the cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();",
									"function getRandomNumber(maxValue){",
									"    return Math.floor(Math.random() * maxValue);   ",
									"}",
									"pm.environment.set('randomQuantity', getRandomNumber(14));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\",  ()=> {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": {{lastAddedItemId}},\n    \"quantity\": {{randomQuantity}}\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an item in the cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\",  ()=> {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replace an item in the cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"productId\": 4641,\n    \"quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", () =>{",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('The order was created',()=>{",
									"    pm.expect(response).to.be.an('Object');",
									"    pm.expect(response).to.be.true;",
									"    pm.expect(response.orderId).to.be.a('string');",
									"    pm.environment.set('orderId', response.orderId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"cartId\" : \"2Acy8MbumHWmfokjoRAxv\",\n\"customerName\" : \"pablo0901\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerName\": \"Juan\",\n    \"comment\": \"order modified\"\n \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', ()=>{",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response=pm.response.json();",
									"//test to find the order",
									"pm.test('Created order is in the list', ()=> {",
									"     var responseJSON = pm.response.json();",
									"",
									"     pm.expect(responseJSON).to.be.an('array');",
									"     pm.expect(responseJSON.length).to.be.at.least(1);",
									"     var createdOrder = responseJSON.find(order => order.id === pm.environment.get('orderId'));",
									"     pm.expect(createdOrder).to.exist;",
									"});",
									"",
									"//test using foreach to find an order",
									"pm.test('find an order', ()=>{",
									"    let orderFound = false;",
									"    let order = response.find((order)=> order.id === pm.variables.get('orderId'));",
									"    pm.expect(order).to.be.an('object');",
									"    //if (typeof variable === 'object')",
									"    /*response.forEach((order) => {",
									"        if(order.id === pm.collectionVariables.get('orderId')){",
									"            console.log('order found');",
									"            orderFound=true;",
									"        }",
									"    });",
									"    pm.expect(orderFound).to.be.true;*/",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"",
									"//imports the orderId value from the collection variables",
									"pm.test('Error message contains the deleted order id',()=>{",
									"   pm.expect(response).to.be.an('object');",
									"   pm.expect(response).to.haveOwnProperty(\"error\");",
									"   const orderIdCollection = pm.collectionVariables.get('orderId');",
									"   pm.expect(response.error).to.contain(orderIdCollection);",
									"});",
									"//console.log(response.id);",
									"",
									"//imports the orderId value from the collection variables",
									"pm.test('The orderId exists',()=>{",
									"    //pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.haveOwnProperty(\"id\");",
									"    const orderIdCollection = pm.collectionVariables.get('orderId');",
									"    pm.expect(response.id).to.eql(orderIdCollection);",
									"    ",
									"});",
									"",
									"pm.test('test',()=>{",
									"    let name = 'Jamie';",
									"     let Sname = 'Doe';",
									"     pm.collectionVariables.set('fullName',`{{name}} {{Sname}}`);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register a new API client",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"clientName\": \"Postman on jose's computer\",\n\"clientEmail\": \"newemail@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Missing auth",
			"item": [
				{
					"name": "Missing header",
					"item": [
						{
							"name": "Get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": " ",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 6415af83534b8f2f80b89907376d34dc73f5cdd54ecdd130cad89fb186357ec",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"cartId\": \"HAz6T490NCYjOmtnWGlPw\",\n\"customerName\": \"Jose\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Missing header message\", ()=>{",
									"   const response  = pm.response.json();",
									"   pm.expect(response.error).to.eql('Missing Authorization header.')",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid token",
					"item": [
						{
							"name": "Get all orders",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer 6415af83534b8f2f80b89907376d34dc73f5cdd54ecdd130cad89fb186357ec",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 6415af83534b8f2f80b89907376d34dc73f5cdd54ecdd130cad89fb186357ec",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"cartId\": \"HAz6T490NCYjOmtnWGlPw\",\n\"customerName\": \"Jose\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Invalid token message\", ()=>{",
									"   const response  = pm.response.json();",
									"   pm.expect(response.error).to.eql('Invalid bearer token.')",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.clear();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401\", ()=> {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"",
							""
						]
					}
				}
			]
		},
		{
			"name": "Invalid inputs",
			"item": [
				{
					"name": "Get all products - invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid category\", ()=>{",
									"   const response  = pm.response.json();",
									"   pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'category'.\")",
									"});",
									"",
									"pm.test(\"Status code is 400\", ()=>{",
									" pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=invalid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid"
								}
							]
						},
						"description": "Testing this sections"
					},
					"response": []
				},
				{
					"name": "Get all products  - Results > maximum.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid category\", ()=>{",
									"   const response  = pm.response.json();",
									"   pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\")",
									"});",
									"",
									"pm.test(\"Status code is 400\", ()=>{",
									" pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=21",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "results",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products  - Results < minimum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid category\", ()=>{",
									"   const response  = pm.response.json();",
									"   pm.expect(response.error).to.have.string(\"Invalid value for query parameter 'results'. Must be greater than 0.\")",
									"});",
									"",
									"pm.test(\"Status code is 400\", ()=>{",
									" pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message\", ()=>{",
									"   const response  = pm.response.json();",
									"   const expectedError =\"Invalid value for query parameter 'results'. Must be greater than 0.\";",
									"   pm.expect(response.error).to.eql(expectedError);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?results=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "results",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.clear();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-grocery-store-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "Token",
			"type": "string"
		},
		{
			"key": "cartNumber",
			"value": "Cart",
			"type": "string"
		},
		{
			"key": "productID",
			"value": ""
		},
		{
			"key": "cartId",
			"value": ""
		},
		{
			"key": "lastAddedItemId",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "fullName",
			"value": ""
		}
	]
}